u {
//   function_0 = "sin(2*PI*X_0)*sin(2*PI*X_1)"  // x-component
//   function_1 = "cos(2*PI*X_0)*cos(2*PI*X_1)"  // y-component
   function_0 = "sin(2*PI*X_0)*sin(2*PI*X_1)"  // x-component
   function_1 = "cos(2*PI*X_0)*cos(2*PI*X_1)"  // y-component
}

mu {
   function = "1.0+0.5*cos(2*PI*X_0)*sin(2*PI*X_1)"
   //function = "2.0"
}

rho {
   function = "1.0+0.5*sin(2*PI*X_0)*sin(2*PI*X_1)"
   //function = "0.5"
}

f {
   function_0 = "(1.0+0.5*sin(2*PI*X_0)*sin(2*PI*X_1))/0.1*sin(2*PI*X_0)*sin(2*PI*X_1)+2*(2*PI*PI*(1.0+0.5*cos(2*PI*X_0)*sin(2*PI*X_1))*sin(2*PI*X_0)*sin(2*PI*X_1)+PI*PI*cos(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_0)*sin(2*PI*X_1))+2*PI*cos(2*PI*X_0)*cos(2*PI*X_1)" // x-component
   function_1 = "(1.0+0.5*sin(2*PI*X_0)*sin(2*PI*X_1))/0.1*cos(2*PI*X_0)*cos(2*PI*X_1)+2*(2*PI*PI*(1.0+0.5*cos(2*PI*X_0)*sin(2*PI*X_1))*cos(2*PI*X_0)*cos(2*PI*X_1)+PI*PI*cos(2*PI*X_0)*sin(2*PI*X_1)*cos(2*PI*X_0)*cos(2*PI*X_1))-2*PI*sin(2*PI*X_0)*sin(2*PI*X_1)" // y-component
   //function_0 = "(5+8*PI*PI)*sin(2*PI*X_0)*sin(2*PI*X_1)" // x-component
   //function_1 = "(5+8*PI*PI)*cos(2*PI*X_0)*cos(2*PI*X_1)" // y-component
   //function_0 = "0.5/0.1*sin(2*PI*X_0)*sin(2*PI*X_1)+2*(2*PI*PI*(1.0+0.5*cos(2*PI*X_0)*sin(2*PI*X_1))*sin(2*PI*X_0)*sin(2*PI*X_1)+PI*PI*cos(2*PI*X_0)*sin(2*PI*X_1)*sin(2*PI*X_0)*sin(2*PI*X_1))" // x-component
   //function_1 = "0.5/0.1*cos(2*PI*X_0)*cos(2*PI*X_1)+2*(2*PI*PI*(1.0+0.5*cos(2*PI*X_0)*sin(2*PI*X_1))*cos(2*PI*X_0)*cos(2*PI*X_1)+PI*PI*cos(2*PI*X_0)*sin(2*PI*X_1)*cos(2*PI*X_0)*cos(2*PI*X_1))" // y-component
}

p {
   function = "sin(2*PI*X_0)*cos(2*PI*X_1)"
   //function = "1.0"
}

du {
   function="0"
}



Main {
// log file parameters
   log_file_name = "VCLaplaceTester2d.log"
   log_all_nodes = FALSE

// visualization dump parameters
   visit_dump_dirname = "viz2d"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

N = 2*2*8 

CartesianGeometry {
   domain_boxes       = [(0,0), (N - 1,N - 1)]
   x_lo               = 0, 0  // lower end of computational domain.
   x_up               = 1, 1  // upper end of computational domain.
   periodic_dimension = 1, 1
}

GriddingAlgorithm {
   max_levels = 1         // Maximum number of levels in hierarchy.

   ratio_to_coarser {
      level_1 =   4,   4  // vector ratio to next coarser level
   }

   largest_patch_size {
      level_0 = 512, 512  // largest patch allowed in hierarchy
                          // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4  // smallest patch allowed in hierarchy
                          // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
//    level_0 = [( N/4 , 0 ),( 3*N/4 - 1 , N - 1 )]
//    level_0 = [( 0 , N/4 ),( N - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )] , [( N/4 , N/2 ),( N/2 - 1 , 3*N/4 - 1 )]
//    level_0 = [( N/4 , N/4 ),( N/2 - 1 , 3*N/4 - 1 )] , [( N/2 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )]
      level_0 = [( N/4 , N/4 ),( N/2 - 1 , N/2 - 1 )] , [( N/2 , N/4 ),( 3*N/4 - 1 , N/2 - 1 )] , [( N/4 , N/2 ),( N/2 - 1 , 3*N/4 - 1 )]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0
   timer_list = "IBTK::*::*"
}
