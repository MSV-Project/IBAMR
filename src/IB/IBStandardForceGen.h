#ifndef included_IBStandardForceGen
#define included_IBStandardForceGen

// Filename: IBStandardForceGen.h
// Last modified: <19.Mar.2007 21:11:18 griffith@box221.cims.nyu.edu>
// Created on 14 Jul 2004 by Boyce Griffith (boyce@trasnaform.speakeasy.net)

/////////////////////////////// INCLUDES /////////////////////////////////////

// IBAMR INCLUDES
#include <ibamr/IBLagrangianForceStrategy.h>
#include <ibamr/LDataManager.h>
#include <ibamr/LNodeLevelData.h>

// SAMRAI INCLUDES
#include <PatchHierarchy.h>
#include <tbox/Database.h>
#include <tbox/Pointer.h>

// PETSc INCLUDES
#include <petscmat.h>

// C++ STDLIB INCLUDES
#include <vector>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBAMR
{

/*!
 * \brief Function to compute the force generated by a linear spring
 * with either a zero or a non-zero resting length.
 *
 * \note This is the default force generation function employed by
 * class IBStandardForceGen.  It is associated with force_fcn_index 0.
 */
inline void
default_linear_spring_force(
    double F[NDIM],
    const double D[NDIM],
    const double& stf,
    const double& rst)
{
    double r_sq = 0.0;
    for (int d = 0; d < NDIM; ++d)
    {
        r_sq += D[d]*D[d];
    }
    const double r = sqrt(r_sq);

    if (r > std::numeric_limits<double>::epsilon())
    {
        const double stf_scal = stf*(1.0-rst/r);
        for (int d = 0; d < NDIM; ++d)
        {
            F[d] = stf_scal*D[d];
        }
    }
    return;
}// default_linear_spring_force

/*!
 * @brief Class IBStandardForceGen computes the force generated by a
 * collection of linear springs, with support for target points.
 */
class IBStandardForceGen
    : public IBLagrangianForceStrategy
{
public:
    /*!
     * @brief Default constructor.
     */
    IBStandardForceGen(
        SAMRAI::tbox::Pointer<SAMRAI::tbox::Database> input_db=NULL);

    /*!
     * @brief Destructor.
     */
    ~IBStandardForceGen();

    /*!
     * \brief Register a edge force specification function with the
     * force generator.
     *
     * \todo Complete specification.
     */
    void registerEdgeForceFunction(
        const int force_fcn_index,
        void (*fcn)(double F[NDIM], const double D[NDIM], const double& stf, const double& rst));

    /*!
     * @brief Setup the data needed to compute spring forces on the
     * specified level of the patch hierarchy.
     */
    void initializeLevelData(
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double init_data_time,
        const bool initial_time,
        const LDataManager* const lag_manager);

    /*!
     * @brief Compute the force generated by the Lagrangian structure.
     */
    void computeLagrangianForce(
        SAMRAI::tbox::Pointer<LNodeLevelData> F_data,
        SAMRAI::tbox::Pointer<LNodeLevelData> X_data,
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double data_time,
        const LDataManager* const lag_manager);

private:
    /*!
     * @brief Copy constructor.
     *
     * NOTE: This constructor is not implemented and should not be
     * used.
     *
     * @param from The value to copy to this object.
     */
    IBStandardForceGen(
        const IBStandardForceGen& from);

    /*!
     * @brief Assignment operator.
     *
     * NOTE: This operator is not implemented and should not be used.
     *
     * @param that The value to assign to this object.
     *
     * @return A reference to this object.
     */
    IBStandardForceGen& operator=(
        const IBStandardForceGen& that);

    /*!
     * @brief Compute the force generated by a collection of linear
     * springs.
     */
    void computeElasticForce(
        SAMRAI::tbox::Pointer<LNodeLevelData> F_data,
        SAMRAI::tbox::Pointer<LNodeLevelData> X_data,
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double data_time,
        const LDataManager* const lag_manager);

    /*!
     * @brief Compute the penalty force generated by a collection of
     * target points.
     */
    void computeTargetForce(
        SAMRAI::tbox::Pointer<LNodeLevelData> F_data,
        SAMRAI::tbox::Pointer<LNodeLevelData> X_data,
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double data_time,
        const LDataManager* const lag_manager);

    /*!
     * \brief Read input values, indicated above, from given database.
     *
     * When assertion checking is active, the database pointer must be
     * non-null.  Otherwise, all your base are belong to us.
     */
    void getFromInput(
        SAMRAI::tbox::Pointer<SAMRAI::tbox::Database> db);

    /*
     * Length-tension functions.
     */
    std::map<int,void (*)(double F[NDIM], const double D[NDIM], const double& stf, const double& rst)> d_edge_force_fcn_map;

    /*
     * Data maintained separately for each level of the patch
     * hierarchy.
     */
    std::vector<Mat> d_L_mats;
    std::vector<std::vector<int> > d_petsc_src_ids, d_petsc_dst_ids;
    std::vector<std::vector<double> > d_stiffnesses, d_rest_lengths;
    std::vector<bool> d_level_initialized;
};
}// namespace IBAMR

/////////////////////////////// INLINE ///////////////////////////////////////

//#include <ibamr/IBStandardForceGen.I>

//////////////////////////////////////////////////////////////////////////////

#endif //#ifndef included_IBStandardForceGen
