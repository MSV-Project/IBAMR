#ifndef included_IBStandardForceGen
#define included_IBStandardForceGen

// Filename: IBStandardForceGen.h
// Created on 03 May 2005 by Boyce Griffith (boyce@mstu1.cims.nyu.edu)
// Last modified: <21.Mar.2007 23:48:20 griffith@box221.cims.nyu.edu>

/////////////////////////////// INCLUDES /////////////////////////////////////

// IBAMR INCLUDES
#include <ibamr/IBLagrangianForceStrategy.h>
#include <ibamr/IBSpringForceGen.h>
#include <ibamr/IBTargetPointForceGen.h>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBAMR
{
/*!
 * \brief Class IBStandardForceGen is a concrete
 * IBLagrangianForceStrategy that is intended to be used in
 * conjunction with curvilinear mesh data that was generated by class
 * IBStandardInitializer.
 *
 * Class IBStandardForceGen provides support for linear and nonlinear
 * spring forces, linear beam forces, and target point penalty forces.
 *
 * @see IBSpringForceGen
 * @see IBBeamForceGen
 * @see IBTargetPointForceGen
 */
class IBStandardForceGen
    : public IBLagrangianForceStrategy
{
public:
    /*!
     * \brief Constructor.
     */
    IBStandardForceGen(
        SAMRAI::tbox::Pointer<IBSpringForceGen> spring_force_gen,
        SAMRAI::tbox::Pointer<IBTargetPointForceGen> target_point_force_gen);

    /*!
     * \brief Virtual destructor.
     */
    virtual ~IBStandardForceGen();

    /*!
     * \brief Setup the data needed to compute the forces on the
     * specified level of the patch hierarchy.
     */
    virtual void initializeLevelData(
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double init_data_time,
        const bool initial_time,
        const LDataManager* const lag_manager);

    /*!
     * \brief Compute the force generated by the Lagrangian structure
     * on the specified level of the patch hierarchy.
     *
     * \note Nodal forces computed by this method are \em added to the
     * force vector.
     */
    virtual void computeLagrangianForce(
        SAMRAI::tbox::Pointer<LNodeLevelData> F_data,
        SAMRAI::tbox::Pointer<LNodeLevelData> X_data,
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double data_time,
        const LDataManager* const lag_manager);

private:
    /*!
     * \brief Default constructor.
     *
     * \note This constructor is not implemented and should not be
     * used.
     */
    IBStandardForceGen();

    /*!
     * \brief Copy constructor.
     *
     * \note This constructor is not implemented and should not be
     * used.
     *
     * \param from The value to copy to this object.
     */
    IBStandardForceGen(
        const IBStandardForceGen& from);

    /*!
     * \brief Assignment operator.
     *
     * \note This operator is not implemented and should not be used.
     *
     * \param that The value to assign to this object.
     *
     * \return A reference to this object.
     */
    IBStandardForceGen& operator=(
        const IBStandardForceGen& that);

    /*!
     * The object used to compute the spring forces.
     */
    SAMRAI::tbox::Pointer<IBSpringForceGen> d_spring_force_gen;

    /*!
     * The object used to compute the target point penalty forces.
     */
    SAMRAI::tbox::Pointer<IBTargetPointForceGen> d_target_point_force_gen;
};
}// namespace IBAMR

/////////////////////////////// INLINE ///////////////////////////////////////

//#include <ibamr/IBStandardForceGen.I>

//////////////////////////////////////////////////////////////////////////////

#endif //#ifndef included_IBStandardForceGen
