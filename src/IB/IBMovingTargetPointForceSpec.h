// Filename: IBMovingTargetPointForceSpec.h
// Created on 14 Aug 2008 by Boyce Griffith
//
// Copyright (c) 2002-2010, Boyce Griffith
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//    * Neither the name of New York University nor the names of its
//      contributors may be used to endorse or promote products derived from
//      this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#ifndef included_IBMovingTargetPointForceSpec
#define included_IBMovingTargetPointForceSpec

/////////////////////////////// INCLUDES /////////////////////////////////////

// IBTK INCLUDES
#include <ibtk/Streamable.h>

// SAMRAI INCLUDES
#include <tbox/AbstractStream.h>

// C++ STDLIB INCLUDES
#include <vector>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBAMR
{
/*!
 * \brief Class IBMovingTargetPointForceSpec encapsulates the data necessary to
 * compute the penalty force generated by a single moving target point.
 */
class IBMovingTargetPointForceSpec
    : public IBTK::Streamable
{
public:
    /*!
     * \brief Register this class and its factory class with the singleton
     * IBTK::StreamableManager object.  This method must be called before any
     * IBMovingTargetPointForceSpec objects are created.
     *
     * \note This method is collective on all MPI processes.  This is done to
     * ensure that all processes employ the same class ID for the
     * IBMovingTargetPointForceSpec class.
     */
    static void
    registerWithStreamableManager();

    /*!
     * \brief Returns a boolean indicating whether the class has been registered
     * with the singleton IBTK::StreamableManager object.
     */
    static bool
    getIsRegisteredWithStreamableManager();

    /*!
     * \brief Default constructor.
     *
     * \note The subdomain index is ignored unless IBAMR is configured to enable
     * support for subdomain indices.  Subdomain indices are not enabled by
     * default.
     */
    IBMovingTargetPointForceSpec(
        const int master_idx=-1,
        const double& kappa_target=0.0,
        const double& eta_target=0.0,
        const int spec_fcn_idx=-1,
        const std::vector<double>& periodic_shift=std::vector<double>(NDIM,0.0),
        const int subdomain_idx=-1);

    /*!
     * \brief Virtual destructor.
     */
    virtual
    ~IBMovingTargetPointForceSpec();

    /*!
     * \return A const reference to the master node index.
     */
    const int&
    getMasterNodeIndex() const;

    /*!
     * \return A non-const reference to the master node index.
     */
    int&
    getMasterNodeIndex();

    /*!
     * \return A const reference to the stiffness of the spring attached to the
     * target point.
     */
    const double&
    getStiffness() const;

    /*!
     * \return A non-const reference to the stiffness of the spring attached to
     * the target point.
     */
    double&
    getStiffness();

    /*!
     * \return A const reference to the damping factor of the spring attached to
     * the target point.
     */
    const double&
    getDamping() const;

    /*!
     * \return A non-const reference to the damping factor of the spring
     * attached to the target point.
     */
    double&
    getDamping();

    /*!
     * \return A const reference to the index of the target point position and
     * velocity specification function associated with the target point.
     */
    const int&
    getPositionAndVelocityFunctionIndex() const;

    /*!
     * \return A non-const reference to the index of the target point position
     * and velocity specification function associated with the target point.
     */
    int&
    getPositionAndVelocityFunctionIndex();

    /*!
     * \return A const reference to the periodic shift associated with the
     * target point.
     */
    const std::vector<double>&
    getPeriodicShift() const;

    /*!
     * \return A non-const reference to the periodic shift associated with the
     * target point.
     */
    std::vector<double>&
    getPeriodicShift();

    /*!
     * \return A const reference to the subdomain index associated with this
     * force spec object.
     *
     * \note IBAMR must be specifically configured to enable support for
     * subdomain indices.  Subdomain indices are not enabled by default.
     */
    const int&
    getSubdomainIndex() const;

    /*!
     * \return A non-const reference to the subdomain index associated with this
     * force spec object.
     *
     * \note IBAMR must be specifically configured to enable support for
     * subdomain indices.  Subdomain indices are not enabled by default.
     */
    int&
    getSubdomainIndex();

    /*!
     * \brief Return the unique identifier used to specify the
     * IBTK::StreamableFactory object used by the IBTK::StreamableManager to
     * extract Streamable objects from data streams.
     */
    virtual int
    getStreamableClassID() const;

    /*!
     * \brief Return an upper bound on the amount of space required to pack the
     * object to a buffer.
     */
    virtual size_t
    getDataStreamSize() const;

    /*!
     * \brief Pack data into the output stream.
     */
    virtual void
    packStream(
        SAMRAI::tbox::AbstractStream& stream);

    /*!
     * \brief Indicate that the object is being shifted across a periodic
     * boundary.
     */
    virtual void
    registerPeriodicShift(
        const SAMRAI::hier::IntVector<NDIM>& offset,
        const std::vector<double>& displacement);

private:
    /*!
     * \brief Copy constructor.
     *
     * \note This constructor is not implemented and should not be used.
     *
     * \param from The value to copy to this object.
     */
    IBMovingTargetPointForceSpec(
        const IBMovingTargetPointForceSpec& from);

    /*!
     * \brief Assignment operator.
     *
     * \note This operator is not implemented and should not be used.
     *
     * \param that The value to assign to this object.
     *
     * \return A reference to this object.
     */
    IBMovingTargetPointForceSpec&
    operator=(
        const IBMovingTargetPointForceSpec& that);

    /*!
     * Indicates whether the factory has been registered with the
     * IBTK::StreamableManager.
     */
    static bool s_registered_factory;

    /*!
     * The class ID for this object type assigned by the
     * IBTK::StreamableManager.
     */
    static int s_class_id;

    /*!
     * Data required to define the target point penalty forces.
     */
    int d_master_idx;
    double d_kappa_target, d_eta_target;
    int d_spec_fcn_idx;
    std::vector<double> d_periodic_shift;

#if ENABLE_SUBDOMAIN_INDICES
    /*!
     * The subdomain index of the force spec object.
     */
    int d_subdomain_idx;
#endif
};
}// namespace IBAMR

/////////////////////////////// INLINE ///////////////////////////////////////

#include <ibamr/IBMovingTargetPointForceSpec.I>

//////////////////////////////////////////////////////////////////////////////

#endif //#ifndef included_IBMovingTargetPointForceSpec
