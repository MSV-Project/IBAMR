#ifndef included_IBTargetPointForceSpec
#define included_IBTargetPointForceSpec

// Filename: IBTargetPointForceSpec.h
// Last modified: <13.Apr.2007 03:28:22 boyce@bigboy.nyconnect.com>
// Created on 21 Mar 2007 by Boyce Griffith (griffith@box221.cims.nyu.edu)

/////////////////////////////// INCLUDES /////////////////////////////////////

// IBAMR INCLUDES
#include <ibamr/Stashable.h>

// SAMRAI INCLUDES
#include <tbox/AbstractStream.h>

// C++ STDLIB INCLUDES
#include <vector>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBAMR
{
/*!
 * \brief Class IBBeamForceSpec encapsulates the data necessary to compute the
 * penalty forces generated by a collection of target points (i.e., forces that
 * anchor the nodes of the Lagrangian mesh) at a single node of the Lagrangian
 * mesh.
 */
class IBTargetPointForceSpec
    : public Stashable
{
public:
    /*!
     * \brief Register this class and its factory class with the singleton
     * StashableManager object.  This method must be called before any
     * IBTargetPointForceSpec objects are created.
     *
     * \note This method is collective on all MPI processes.  This is done to
     * ensure that all processes employ the same stashable ID for the
     * IBTargetPointForceSpec class.
     */
    static void registerWithStashableManager();

    /*!
     * \brief Returns a boolean indicating whether the class has been registered
     * with the singleton StashableManager object.
     */
    static bool getIsRegisteredWithStashableManager();

    /*!
     * \brief Default constructor.
     */
    IBTargetPointForceSpec(
        const int master_idx=-1,
        const double& kappa_target=0.0,
        const std::vector<double>& X_target=std::vector<double>(NDIM,0.0));

    /*!
     * \brief Virtual destructor.
     */
    virtual ~IBTargetPointForceSpec();

    /*!
     * \return A const refernce to the master node index.
     */
    const int& getMasterNodeIndex() const;

    /*!
     * \return A non-const reference to the master node index.
     */
    int& getMasterNodeIndex();

    /*!
     * \return A const reference to the stiffness of the spring attached to the
     * target point.
     */
    const double& getStiffness() const;

    /*!
     * \return A non-const reference to the stiffness of the spring attached to
     * the target point.
     */
    double& getStiffness();

    /*!
     * \return A const reference to the position of the target point attached to
     * the node.
     */
    const std::vector<double>& getTargetPointPosition() const;

    /*!
     * \return A non-const reference to the position of the target point
     * attached to the node.
     */
    std::vector<double>& getTargetPointPosition();

    /*!
     * \brief Return the unique identifier used to specify the StashableFactory
     * object used by the StashableManager to extract Stashable objects from
     * data streams.
     */
    virtual int getStashableID() const;

    /*!
     * \brief Return an upper bound on the amount of space required to pack the
     * object to a buffer.
     */
    virtual size_t getDataStreamSize() const;

    /*!
     * \brief Pack data into the output stream.
     */
    virtual void packStream(
        SAMRAI::tbox::AbstractStream& stream);

private:
    /*!
     * \brief Default constructor.
     *
     * \note This constructor is not implemented and should not be used.
     */
    IBTargetPointForceSpec();

    /*!
     * \brief Copy constructor.
     *
     * \note This constructor is not implemented and should not be used.
     *
     * \param from The value to copy to this object.
     */
    IBTargetPointForceSpec(
        const IBTargetPointForceSpec& from);

    /*!
     * \brief Assignment operator.
     *
     * \note This operator is not implemented and should not be used.
     *
     * \param that The value to assign to this object.
     *
     * \return A reference to this object.
     */
    IBTargetPointForceSpec& operator=(
        const IBTargetPointForceSpec& that);

    /*!
     * Indicates whether the factory has been registered with the
     * StashableManager.
     */
    static bool s_registered_factory;

    /*!
     * The stashable ID for this object type.
     */
    static int s_stashable_id;

    /*!
     * Data required to define the target point penalty forces.
     */
    int d_master_idx;
    double d_kappa_target;
    std::vector<double> d_X_target;
};
}// namespace IBAMR

/////////////////////////////// INLINE ///////////////////////////////////////

//#include <ibamr/IBTargetPointForceSpec.I>

//////////////////////////////////////////////////////////////////////////////

#endif //#ifndef included_IBTargetPointForceSpec
