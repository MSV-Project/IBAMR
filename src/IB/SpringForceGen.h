//
// SpringForceGen.h
//
// Created on 14 Jul 2004
//         by Boyce Griffith (boyce@trasnaform.speakeasy.net).
//
// Last modified: <21.Jun.2005 01:38:56 boyce@bigboy.verizon.net>
//

#ifndef included_SpringForceGen
#define included_SpringForceGen

// STL INCLUDES
//
#include <vector>

// SAMRAI-tools INCLUDES
//
#include "IBLagrangianForceStrategy.h"
#include "LDataManager.h"
#include "LNodeLevelData.h"

// SAMRAI INCLUDES
//
#ifndef included_SAMRAI_config
#include "SAMRAI_config.h"
#endif

#include "PatchHierarchy.h"
#include "tbox/Database.h"
#include "tbox/Pointer.h"

using namespace SAMRAI;
using namespace std;

// PETSc INCLUDES
//

//
//  Include "petscmat.h" so that we can use matrices.  Note that this
//  file automatically includes:
//  
//     petsc.h       - base PETSc routines   petscvec.h    - vectors
//     petscsys.h    - system routines       petscmat.h    - matrices
//     petscis.h     - index sets            petscviewer.h - viewers
//
#include "petscmat.h"

// CLASS DEFINITION
//

/*!
 * @brief Class SpringForceGen computes the force generated by a
 * collection of linear springs.
 */
class SpringForceGen
    : public IBLagrangianForceStrategy
{
public:
    /*!
     * @brief Default constructor.
     */
    SpringForceGen(
        tbox::Pointer<tbox::Database> input_db=NULL);
    
    /*!
     * @brief Destructor.
     */
    ~SpringForceGen();

    /*!
     * @brief Paremetric resonance parameters.
     */
    void setParametricResonance(
        bool use_parametric_resonance,
        double alpha,
        double omega);
    
    /*!
     * @brief Setup the data needed to compute spring forces on the
     * specified level of the patch hierarchy.
     */
    void initializeLevelData(
        const tbox::Pointer<hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double init_data_time,
        const bool initial_time,
        const LDataManager* const lag_manager);

    /*!
     * @brief Compute the force generated by a collection of linear
     * springs (i.e. springs with zero resting lengths).
     */
    void computeLagrangianForce(
        tbox::Pointer<LNodeLevelData> F_data,
        tbox::Pointer<LNodeLevelData> X_data,
        const tbox::Pointer<hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double data_time,
        const LDataManager* const lag_manager);
    
private:
    /*!
     * @brief Copy constructor.
     *
     * NOTE: This constructor is not implemented and should not be
     * used.
     *
     * @param from The value to copy to this object.
     */
    SpringForceGen(
        const SpringForceGen& from);
    
    /*!
     * @brief Assignment operator.
     *
     * NOTE: This operator is not implemented and should not be used.
     * 
     * @param that The value to assign to this object.
     * 
     * @return A reference to this object.
     */
    SpringForceGen& operator=(
        const SpringForceGen& that);

    /*
     * Data maintained separately for each level of the patch
     * hierarchy.
     */
    vector<Mat> d_L_mats;
    vector<vector<int> > d_local_src_ids;
    vector<vector<double> > d_stiffnesses;
    vector<bool> d_level_initialized;

    /*
     * Parametric resonance parameters.
     */
    bool d_use_parametric_resonance;
    double d_alpha, d_omega;
};

// INLINED FUNCTION DEFINITIONS
//
//#ifndef DEBUG_NO_INLINE
//#include "SpringForceGen.I"
//#endif

#endif //#ifndef included_SpringForceGen

//////////////////////////////////////////////////////////////////////////////
