#ifndef included_SpringForceGen
#define included_SpringForceGen

// Filename: SpringForceGen.h
// Created on 14 Jul 2004 by Boyce Griffith (boyce@trasnaform.speakeasy.net)
// Last modified: <07.Oct.2006 21:38:46 boyce@bigboy.nyconnect.com>

/////////////////////////////// INCLUDES /////////////////////////////////////

// IBAMR INCLUDES
#include <ibamr/IBLagrangianForceStrategy.h>
#include <ibamr/LDataManager.h>
#include <ibamr/LNodeLevelData.h>

// SAMRAI INCLUDES
#include <PatchHierarchy.h>
#include <tbox/Database.h>
#include <tbox/Pointer.h>

// PETSc INCLUDES
#include <petscmat.h>

// C++ STDLIB INCLUDES
#include <vector>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBAMR
{
/*!
 * @brief Class SpringForceGen computes the force generated by a
 * collection of linear springs.
 */
class SpringForceGen
    : public IBLagrangianForceStrategy
{
public:
    /*!
     * @brief Default constructor.
     */
    SpringForceGen(
        SAMRAI::tbox::Pointer<SAMRAI::tbox::Database> input_db=NULL);

    /*!
     * @brief Destructor.
     */
    ~SpringForceGen();

    /*!
     * @brief Paremetric resonance parameters.
     */
    void setParametricResonance(
        bool use_parametric_resonance,
        double alpha,
        double omega);

    /*!
     * @brief Setup the data needed to compute spring forces on the
     * specified level of the patch hierarchy.
     */
    void initializeLevelData(
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double init_data_time,
        const bool initial_time,
        const LDataManager* const lag_manager);

    /*!
     * @brief Compute the force generated by a collection of linear
     * springs (i.e. springs with zero resting lengths).
     */
    void computeLagrangianForce(
        SAMRAI::tbox::Pointer<LNodeLevelData> F_data,
        SAMRAI::tbox::Pointer<LNodeLevelData> X_data,
        const SAMRAI::tbox::Pointer<SAMRAI::hier::PatchHierarchy<NDIM> > hierarchy,
        const int level_number,
        const double data_time,
        const LDataManager* const lag_manager);

private:
    /*!
     * @brief Copy constructor.
     *
     * NOTE: This constructor is not implemented and should not be
     * used.
     *
     * @param from The value to copy to this object.
     */
    SpringForceGen(
        const SpringForceGen& from);

    /*!
     * @brief Assignment operator.
     *
     * NOTE: This operator is not implemented and should not be used.
     *
     * @param that The value to assign to this object.
     *
     * @return A reference to this object.
     */
    SpringForceGen& operator=(
        const SpringForceGen& that);

    /*
     * Data maintained separately for each level of the patch
     * hierarchy.
     */
    std::vector<Mat> d_L_mats;
    std::vector<std::vector<int> > d_local_src_ids;
    std::vector<std::vector<double> > d_stiffnesses;
    std::vector<bool> d_level_initialized;
};
}// namespace IBAMR

/////////////////////////////// INLINE ///////////////////////////////////////

//#include <ibamr/SpringForceGen.I>

//////////////////////////////////////////////////////////////////////////////

#endif //#ifndef included_SpringForceGen
