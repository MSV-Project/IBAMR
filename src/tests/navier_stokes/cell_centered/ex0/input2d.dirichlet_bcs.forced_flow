// advective term options
CTU_ONLY = -1
SECOND_ORDER = 0
FOURTH_ORDER = 1
MC_LIMITED = 2
MUSCL_LIMITED = 3

// physical parameters
MU = 1.0
RHO = 1.0

// grid spacing parameters
MAX_LEVELS = 2   // maximum number of levels in locally refined grid
REF_RATIO  = 2   // refinement ratio between levels

N = 64                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

// exact solution function expressions
U = "X_1*(3*X_1-2)*cos(2*PI*(X_0-sin(2*PI*t*t)))"
V = "2*PI*X_1*X_1*(X_1-1)*sin(2*PI*(X_0-sin(2*PI*t*t)))"
P = "-2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*sin(2*PI*X_1)+4*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*X_1-2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI+2*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*sin(2*PI*X_1)-2*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*X_1+nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI"
F_U = "24*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*cos(2*PI*t*t)*t*X_1*X_1-16*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*cos(2*PI*t*t)*t*X_1-6*cos(2*PI*(X_0-sin(2*PI*t*t)))*X_1^4*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI+8*cos(2*PI*(X_0-sin(2*PI*t*t)))*X_1^3*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI-4*cos(2*PI*(X_0-sin(2*PI*t*t)))*X_1*X_1*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI-4*cos(2*PI*t*t)*t*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*sin(2*PI*X_1)+8*cos(2*PI*t*t)*t*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1-4*cos(2*PI*t*t)*t*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI-4*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*sin(2*PI*X_1)+4*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1-2*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI+12*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1*X_1-8*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1-6*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))"
F_V = "-2*PI*(8*PI*PI*cos(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*t*t)*t*X_1^3-8*PI*PI*cos(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*t*t)*t*X_1*X_1-6*PI*X_1^5+10*PI*X_1^4-4*PI*X_1^3+2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*X_1)-2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))-2*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*X_1)+nu*cos(2*PI*(X_0-sin(2*PI*t*t)))-4*nu*PI*PI*sin(2*PI*(X_0-sin(2*PI*t*t)))*X_1^3+4*nu*PI*PI*sin(2*PI*(X_0-sin(2*PI*t*t)))*X_1*X_1+6*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*X_1-2*nu*sin(2*PI*(X_0-sin(2*PI*t*t))))"

VelocitySolution {
   constant_names = "nu"
   nu = MU/RHO
   function_0 = U
   function_1 = V
}

PressureSolution {
   constant_names = "nu"
   nu = MU/RHO
   function = P
}

ForcingFunction {
   constant_names = "nu"
   nu = MU/RHO
   function_0 = F_U
   function_1 = F_V
}

VelocityBcCoefs_0 {
   constant_names = "nu"
   nu = MU/RHO

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = U
   gcoef_function_1 = U
   gcoef_function_2 = U
   gcoef_function_3 = U
}

VelocityBcCoefs_1 {
   constant_names = "nu"
   nu = MU/RHO

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = V
   gcoef_function_1 = V
   gcoef_function_2 = V
   gcoef_function_3 = V
}

INSHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 0.5e0    // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10000    // max number of simulation timesteps
   regrid_interval       = 10000    // disable regridding
   dt_max = 0.5/NFINEST

   enable_logging = TRUE

   tag_buffer = 1

   conservation_form = FALSE

   using_vorticity_tagging = TRUE
   vorticity_rel_thresh = 0.25

   output_P = TRUE
   output_F = TRUE
   output_Q = FALSE

   output_Omega = TRUE

   output_Div_U = FALSE
   output_Div_u = FALSE
   output_Div_u_adv = FALSE

   mu  = MU
   rho = RHO

   velocity_projection_type = "pressure_increment"
   pressure_projection_type = "pressure_update"

   using_synch_projection = FALSE
   second_order_pressure_update = TRUE
   normalize_pressure = TRUE

   num_cycles = 1
   num_init_cycles = 5

   helmholtz_max_iterations = 1000
   helmholtz_abs_residual_tol = 1.0e-30
   helmholtz_rel_residual_tol = 1.0e-12
}

GodunovAdvector {
   limiter_type = FOURTH_ORDER
   using_full_ctu = TRUE
}

AdvDiffHierarchyIntegrator {
   viscous_timestepping_type = "CRANK_NICOLSON"

   enable_logging = TRUE

   tag_buffer = 1

   AdvDiffHypPatchOps {
      compute_init_velocity  = TRUE
      compute_half_velocity  = FALSE
      compute_final_velocity = FALSE
      extrap_type            = "LINEAR"
   }

   HyperbolicLevelIntegrator {
      cfl                      = 0.975e0  // max cfl factor used in problem
      cfl_init                 = 0.975e0  // initial cfl factor
      lag_dt_computation       = FALSE
      use_ghosts_to_compute_dt = FALSE
   }

   using_FAC = FALSE
   max_iterations = 1000
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-12
}

HierarchyProjector {
   enable_logging = TRUE

   max_iterations = 25
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-12

   FACOp {
      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 2

      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization   = "LINEAR_REFINE"

      hypre_solver {
         solver_type = "PFMG"
         rap_type = 1
         relax_type = 3
         num_pre_relax_steps   = 2
         num_post_relax_steps  = 2
         max_iterations        = 1
         relative_residual_tol = 1.0e-12
         enable_logging = FALSE
      }
   }

   FACPreconditioner {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 2
   }
}

Main {
// log file parameters
   log_file_name    = "INS2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = NFINEST/8   // zero to turn off
   viz_dump_dirname      = "viz_INS2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0           // zero to turn off
   restart_write_dirname = "restart_INS2d"

// timer dump parameters
   timer_dump_interval   = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0          // lower end of computational domain.
   x_up         =  1, 1          // upper end of computational domain.
   periodic_dimension = 1, 0
}

GriddingAlgorithm {
   allow_patches_smaller_than_ghostwidth = TRUE

   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  4,  4 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [((REF_RATIO^0)*N/2 + 0,(REF_RATIO^0)*N/2 + 0),((REF_RATIO^0)*N - 1,(REF_RATIO^0)*N - 1)]
      level_1 = [((REF_RATIO^1)*N/2 + 1,(REF_RATIO^1)*N/2 + 1),((REF_RATIO^1)*N - 2,(REF_RATIO^1)*N - 1)]
      level_2 = [((REF_RATIO^2)*N/2 + 2,(REF_RATIO^2)*N/2 + 2),((REF_RATIO^2)*N - 3,(REF_RATIO^2)*N - 1)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
