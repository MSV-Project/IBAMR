// physical parameters
MU = 0.0001
RHO = 1.0

// grid spacing parameters
MAX_LEVELS = 2   // maximum number of levels in locally refined grid
REF_RATIO  = 4   // refinement ratio between levels

N = 64                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

UInit {
   rho = 80.0
   delta = 0.05
}

INSStaggeredHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 5.0e0    // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10000    // max number of simulation timesteps
   regrid_interval       = 4

   enable_logging = TRUE

   cfl = 0.95

   tag_buffer = 1

   conservation_form = FALSE
   using_vorticity_tagging = TRUE
   vorticity_rel_thresh = 0.25

   output_U = TRUE
   output_P = TRUE
   output_F = FALSE
   output_Omega = TRUE
   output_Div_U = TRUE

   mu  = MU
   rho = RHO

   normalize_pressure = TRUE

   HelmholtzHypreSolver {
      solver_type           = "PCG"
      precond_type          = "Split"
      split_solver_type     = "Jacobi"
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PoissonHypreSolver {
      solver_type           = "PCG"
      precond_type          = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 1
      num_post_relax_steps  = 1
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PoissonFACSolver {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 3

      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 1

      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization   = "LINEAR_REFINE"

      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }
}

Main {
// log file parameters
   log_file_name    = "INS2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = 1 // NFINEST/8   // zero to turn off
   viz_dump_dirname      = "viz_INS2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0           // zero to turn off
   restart_write_dirname = "restart_INS2d"

// timer dump parameters
   timer_dump_interval   = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0          // lower end of computational domain.
   x_up         =  1, 1          // upper end of computational domain.
   periodic_dimension = 1, 1
}

GriddingAlgorithm {
   allow_patches_smaller_than_ghostwidth = TRUE

   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 12, 12 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.80e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.80e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR" // , "REFINE_BOXES"
   RefineBoxes {
      level_0 = [(0,0),(0,N - 1)] , [(N - 1,0),(N - 1,N - 1)]
      level_1 = [(0,0),(1,2*N - 1)] , [(2*N - 2,0),(2*N - 1,2*N - 1)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
