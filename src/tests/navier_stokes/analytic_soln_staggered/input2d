// physical parameters
MU = 1.0e-2
RHO = 1.0

// grid spacing parameters
MAX_LEVELS = 1   // maximum number of levels in locally refined grid
REF_RATIO  = 4   // refinement ratio between levels

N = 256                                   // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

// exact solution function expressions
U = "1 - 2*(cos(2*PI*(X_0-t))*sin(2*PI*(X_1-t)))*exp(-8*PI*PI*nu*t)"
V = "1 + 2*(sin(2*PI*(X_0-t))*cos(2*PI*(X_1-t)))*exp(-8*PI*PI*nu*t)"
P = "-(cos(4*PI*(X_0-t)) + cos(4*PI*(X_1-t)))*exp(-16*PI*PI*nu*t)"

// normal tractions
// T_n_X_0_lower =  P - 2*nu*diff(U,X_0)
// T_n_X_1_lower =  P - 2*nu*diff(V,X_1)
// T_n_X_0_upper = -P + 2*nu*diff(U,X_0)
// T_n_X_1_upper = -P + 2*nu*diff(V,X_1)
T_n_X_0_lower = "-exp(-16*PI^2*nu*t)*cos(4*PI*(X_0-t))-exp(-16*PI^2*nu*t)*cos(4*PI*(-X_1+t))+8*nu*sin(2*PI*(X_0-t))*sin(2*PI*(-X_1+t))*PI*exp(-8*PI^2*nu*t)"
T_n_X_1_lower = "-exp(-16*PI^2*nu*t)*cos(4*PI*(X_0-t))-exp(-16*PI^2*nu*t)*cos(4*PI*(-X_1+t))-8*nu*sin(2*PI*(X_0-t))*sin(2*PI*(-X_1+t))*PI*exp(-8*PI^2*nu*t)"
T_n_X_0_upper = "exp(-16*PI^2*nu*t)*cos(4*PI*(X_0-t))+exp(-16*PI^2*nu*t)*cos(4*PI*(-X_1+t))-8*nu*sin(2*PI*(X_0-t))*sin(2*PI*(-X_1+t))*PI*exp(-8*PI^2*nu*t)"
T_n_X_1_upper = "exp(-16*PI^2*nu*t)*cos(4*PI*(X_0-t))+exp(-16*PI^2*nu*t)*cos(4*PI*(-X_1+t))+8*nu*sin(2*PI*(X_0-t))*sin(2*PI*(-X_1+t))*PI*exp(-8*PI^2*nu*t)"

// tangential tractions
// T_t_X_0_lower = T_t_X_1_lower = -(nu*diff(U,X_1) + nu*diff(V,X_0))
// T_t_X_0_upper = T_t_X_1_upper = +(nu*diff(U,X_1) + nu*diff(V,X_0))
T_t = "0.0"

VelocityInitialConditions {
   constant_names = "nu"
   nu = MU/RHO
   function_0 = U
   function_1 = V
}

VelocityBcCoefs_0 {
   constant_names = "nu"
   nu = MU/RHO

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = U
   gcoef_function_1 = U
   gcoef_function_2 = U
   gcoef_function_3 = U
}

VelocityBcCoefs_1 {
   constant_names = "nu"
   nu = MU/RHO

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = V
   gcoef_function_1 = V
   gcoef_function_2 = V
   gcoef_function_3 = V
}

PressureInitialConditions {
   constant_names = "nu"
   nu = MU/RHO
   function = P
}

INSStaggeredHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 1.0      // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10 // 10000000 // max number of simulation timesteps
   regrid_interval       = 10000000 // disable regridding

   enable_logging = TRUE

   cfl = 1.0
   dt_max = cfl/(3*NFINEST)

   tag_buffer = 1

   conservation_form = FALSE
   using_vorticity_tagging = TRUE
   vorticity_rel_thresh = 0.25

   output_U = TRUE
   output_P = TRUE
   output_F = FALSE
   output_Omega = TRUE
   output_Div_U = TRUE

   mu  = MU
   rho = RHO

   normalize_pressure = TRUE

   HierarchyProjector {
   }

   HelmholtzHypreSolver {
      solver_type = "Split"
      split_solver_type = "Jacobi"
      relative_residual_tol = 1.0e-12
      max_iterations = 1
      enable_logging = FALSE
   }

   PoissonHypreSolver {
      solver_type = "PFMG"
      rap_type = 1
      relax_type = 3
      skip_relax = 1
      num_pre_relax_steps   = 0
      num_post_relax_steps  = 3
      max_iterations        = 1
      relative_residual_tol = 1.0e-12
      enable_logging = FALSE
   }
}

HierarchyProjector {
   enable_logging = FALSE

   max_iterations = 25
   abs_residual_tol = 0.0
   rel_residual_tol = 1.0e-15
   initial_guess_nonzero = FALSE

   FACOp {
      fac_max_cycles = 1
      fac_uses_presmoothing = TRUE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = FALSE
      skip_restrict_residual = FALSE

      ssor_iterations = 2

      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization   = "Ewing"

      hypre_solver {
         solver_type = "PFMG"
         rap_type = 1
         relax_type = 3
         skip_relax = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         max_iterations        = 1
         relative_residual_tol = 1.0e-12
         enable_logging = FALSE
      }
   }

   FACPreconditioner {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 3
   }
}

Main {
// log file parameters
   log_file_name    = "INS2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = NFINEST/8   // zero to turn off
   viz_dump_dirname      = "viz_INS2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0           // zero to turn off
   restart_write_dirname = "restart_INS2d"

// timer dump parameters
   timer_dump_interval   = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0          // lower end of computational domain.
   x_up         =  1, 1          // upper end of computational domain.
   periodic_dimension = 1, 1 // 0, 0
}

GriddingAlgorithm {
   allow_patches_smaller_than_ghostwidth = TRUE

   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  4,  4 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR" // "REFINE_BOXES"
   RefineBoxes {
      level_0 = [(0*(REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [((REF_RATIO^0)*0   + 0,(REF_RATIO^0)*N/4 + 0),(  (REF_RATIO^0)*N   - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*0   + 0),(3*(REF_RATIO^0)*N/4 - 1,  (REF_RATIO^0)*N   - 1)]
//    level_0 = [(0*(REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(2*(REF_RATIO^0)*N/4 - 1,2*(REF_RATIO^0)*N/4 - 1)] , [((REF_RATIO^0)*N/4  + (REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/8 + 0),(2*(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/4 - 1,2*(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/8 - 1)] , [((REF_RATIO^0)*N/4  + 0,(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/4 + 0),(2*(REF_RATIO^0)*N/4 - 1,2*(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/4 - 1)]
      level_1 = [((REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1),(3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2)]
      level_2 = [((REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2),(3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
