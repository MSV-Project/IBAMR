// advective term options
CTU_ONLY = -1
SECOND_ORDER = 0
FOURTH_ORDER = 1
MC_LIMITED = 2
MUSCL_LIMITED = 3

// constants
PI = 3.14159265358979
N = 16              // coarsest grid spacing
NFINEST = 16*N      // finest grid spacing
MAX_LEVELS = 3

DELTA_FCN = "IB_6"  // the choice of delta function

R = 0.15            // the cylinder radius
Re = 100.0          // the desired Reynolds number (Re)
MU = 2.0*R/Re       // the viscosity required to attain the desired Re

IBHierarchyIntegrator {
   start_time            = 0.e0     // initial simulation time
   end_time              = 250.0e0  // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10000000 // max number of simulation timesteps

   enable_logging = TRUE

   regrid_interval = 2
   dt_max = 0.8/NFINEST
   delta_fcn = DELTA_FCN
   timestepping_order = 2
}

IBStandardInitializer {
   max_levels = MAX_LEVELS

   base_filenames_2 = "cylinder2d_256"   // corresponds to NFINEST = 256
   cylinder2d_256 {
      // NOTE: this value is equal to 85.0*NFINEST scaled by ds, the
      // curvilinear mesh spacing, which is given by
      //
      //     ds = 2*PI*R/(61*NFINEST/256)
      //
      // Thus,
      //
      //     stiffnsess = 85.0*NFINEST*ds = 85.0*2.0*PI*R*(256/61)
      //
      // Note that this stiffness must be modified if generate_mesh2d.m
      // is modified.
      uniform_target_stiffness = 85.0*2.0*PI*R*(256/61)
   }

// base_filenames_2 = "cylinder2d_512"   // corresponds to NFINEST = 512
// cylinder2d_512 {
//    uniform_target_stiffness = 85.0*2.0*PI*R*(256/61)
// }

// base_filenames_2 = "cylinder2d_1024"  // corresponds to NFINEST = 1024
// cylinder2d_1024 {
//    uniform_target_stiffness = 85.0*2.0*PI*R*(256/61)
// }
}

IBStandardForceGen {
  // intentionally blank
}

FeedbackFSet {
   kappa = 500.0
   width0 = 1.0/64.0
   width1 = 4.0/64.0
}

INSHierarchyIntegrator {
   enable_logging = TRUE

   tag_buffer = 1 , 1 , 2

   cfl = 1.0  // this only affects the "acceleration" timestep restriction

   conservation_form = FALSE

   using_vorticity_tagging = TRUE
   vorticity_threshold = 0.025

   output_P = TRUE
   output_F = TRUE
   output_Q = FALSE

   output_Omega = TRUE

   output_Div_U = FALSE
   output_Div_u = FALSE
   output_Div_u_adv = FALSE

   rho = 1.0
   mu = MU

   project_predicted_flux = TRUE
   reproject_pressure = TRUE
   second_order_pressure_update = TRUE

   poisson_abs_residual_tol = 1.0e-30
   poisson_rel_residual_tol = 1.0e-6

   num_cycles = 1
   num_init_cycles = 5
}

GodunovAdvector {
   limiter_type = MUSCL_LIMITED
}

AdvDiffHierarchyIntegrator {
   enable_logging = TRUE

   tag_buffer = 1

   AdvDiffHypPatchOps {
      compute_init_velocity  = TRUE
      compute_half_velocity  = FALSE
      compute_final_velocity = FALSE
   }

   HyperbolicLevelIntegrator {
      cfl                      = 0.4875e0 // max cfl factor used in problem
      cfl_init                 = 0.4875e0 // initial cfl factor
      lag_dt_computation       = FALSE
      use_ghosts_to_compute_dt = FALSE
   }

   solver_package = "PETSc"
   max_iterations = 25
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-8

   FACOps {
      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 1

      coarse_solver_choice = "block_jacobi"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 2
      prolongation_method = "LINEAR_REFINE"
      cf_discretization = "LINEAR_REFINE"
   }

   FACPreconditioners {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 2
   }
}

HierarchyProjector {
   enable_logging = TRUE

   solver_package = "PETSc"
   max_iterations = 25
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-8

   FACOp {
      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 2

      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization = "LINEAR_REFINE"

      hypre_solver {
         solver_type = "PFMG"
         rap_type = 1
         relax_type = 3
         num_pre_relax_steps   = 2
         num_post_relax_steps  = 2
         max_iterations        = 1
         relative_residual_tol = 1.0e-12
         enable_logging = FALSE
      }
   }

   FACPreconditioner {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 2
   }
}

Main {
// log file parameters
   log_file_name    = "IB2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = NFINEST/2     // zero to turn off
   viz_dump_dirname      = "viz_IB2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval        =  0          // zero to turn off
   restart_write_dirname   = "restart_IB2d"

// timer dump parameters
   timer_dump_interval     = 0           // zero to turn off

// convergence monitoring parameters
   monitor_convergence = TRUE
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0        // lower end of computational domain.
   x_up         =  8, 8        // upper end of computational domain.
   periodic_dimension = 1,1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS       // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1             = 4,4  // vector ratio to next coarser level
      level_2             = 4,4
      level_3             = 4,4
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  4,  4 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR" , "REFINE_BOXES"
   RefineBoxes {
      level_0 = [(0,0),(0,   N - 1)] , [(   N - 1,0),(   N - 1,   N - 1)] , [(   2    ,   6    ) , (   6 - 1,   10 - 1)]
      level_1 = [(0,0),(0, 4*N - 1)] , [( 4*N - 1,0),( 4*N - 1, 4*N - 1)] , [( 4*2 + 1, 4*6 + 1) , ( 4*6 - 2, 4*10 - 2)]
      level_2 = [(0,0),(0,16*N - 1)] , [(16*N - 1,0),(16*N - 1,16*N - 1)] , [(16*2 + 2,16*6 + 2) , (16*6 - 3,16*10 - 3)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "STOOLS::*::*" , "*::*::*"
}
