// Filename: PETScVecUtilities.h
// Created on 23 Aug 2010 by Boyce Griffith
//
// Copyright (c) 2002-2010, Boyce Griffith
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice,
//      this list of conditions and the following disclaimer.
//
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//
//    * Neither the name of New York University nor the names of its
//      contributors may be used to endorse or promote products derived from
//      this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

#ifndef included_PETScVecUtilities
#define included_PETScVecUtilities

/////////////////////////////// INCLUDES /////////////////////////////////////

// PETSc INCLUDES
#include <petscvec.h>

// SAMRAI INCLUDES
#include <CellData.h>
#include <CellVariable.h>
#include <RefineSchedule.h>
#include <SideData.h>
#include <SideVariable.h>

// BLITZ++ INCLUDES
#include <blitz/tinyvec.h>

/////////////////////////////// CLASS DEFINITION /////////////////////////////

namespace IBTK
{
/*!
 * \brief Class PETScVecUtilities provides utility functions for <A
 * HREF="http://www-unix.mcs.anl.gov/petsc">PETSc</A> Vec objects.
 */
class PETScVecUtilities
{
public:
    /*!
     * \name Methods acting on SAMRAI::hier::Patch and SAMRAI::hier::PatchData
     * objects.
     */
    //\{

    /*!
     * \brief Construct a sequential PETSc Vec wrapper for the provided SAMRAI
     * CellData object.
     *
     * \note The array for the returned PETSc Vec object is initialized to
     * correspond to that of the data underlying the CellData object.
     */
    static void
    constructPatchVecWrapper(
        Vec& vec,
        SAMRAI::pdat::CellData<NDIM,double>& data);

    /*!
     * \brief Construct sequential PETSc Vec wrappers for the provided SAMRAI
     * SideData object.  One Vec wrapper is constructed for each coordinate
     * axis.
     *
     * \note The arrays for the returned PETSc Vec objects are initialized to
     * correspond to those of the data underlying the SideData object.
     */
    static void
    constructPatchVecWrappers(
        blitz::TinyVector<Vec,NDIM>& vecs,
        SAMRAI::pdat::SideData<NDIM,double>& data);

    /*!
     * \brief Assign a 0-based DOF index to each degree of freedom on a patch,
     * including ghost cell values.
     *
     * The DOF indices generated by this method are compatible with the
     * sequential PETSc Vec wrappers generated by constructPatchVecWrapper().
     *
     * \return Total number of DOF indices associated with the patch data
     * object.
     */
    static int
    constructPatchDOFIndices(
        SAMRAI::pdat::CellData<NDIM,int>& dof_index,
        SAMRAI::pdat::CellData<NDIM,double>& data);

    /*!
     * \brief Assign a 0-based DOF index to each degree of freedom of each
     * component axis on a patch, including ghost cell values.
     *
     * The DOF indices generated by this method are compatible with the
     * sequential PETSc Vec wrappers generated by constructPatchVecWrappers().
     * Specifically, the first DOF index for EACH component axis is 0.
     *
     * \return Total number of DOF indices associated with each component axis
     * of the patch data object.
     */
    static blitz::TinyVector<int,NDIM>
    constructPatchDOFIndices(
        SAMRAI::pdat::SideData<NDIM,int>& dof_index,
        SAMRAI::pdat::SideData<NDIM,double>& data);

    //\}

    /*!
     * \name Methods acting on SAMRAI::hier::PatchLevel and
     * SAMRAI::hier::Variable objects.
     */
    //\{

    /*!
     * \brief Construct a parallel PETSc Vec corresponding to the provided
     * SAMRAI CellVariable object on the provided SAMRAI::hier::PatchLevel.
     *
     * \note Data must be explicitly copied between the SAMRAI and PETSc
     * representations using copyToPatchLevelVec and copyFromPatchLevelVec.
     *
     * \note Ghost cell values are included in the PETSc Vec generated by this
     * method.
     */
    static void
    constructPatchLevelVec(
        Vec& vec,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::CellVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Construct a parallel PETSc Vec corresponding to the provided
     * SAMRAI SideVariable object on the provided SAMRAI::hier::PatchLevel.
     *
     * \note Data must be explicitly copied between the SAMRAI and PETSc
     * representations using copyToPatchLevelVec and copyFromPatchLevelVec.
     *
     * \note Ghost cell values are included in the PETSc Vec generated by this
     * method.
     */
    static void
    constructPatchLevelVec(
        Vec& vec,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::SideVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Copy data to a parallel PETSc Vec on the provided
     * SAMRAI::hier::PatchLevel.
     */
    static void
    copyToPatchLevelVec(
        Vec& vec,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::CellVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Copy data from a parallel PETSc Vec on the provided
     * SAMRAI::hier::PatchLevel.
     */
    static void
    copyFromPatchLevelVec(
        Vec& vec,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::CellVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Copy data to a parallel PETSc Vec on the provided
     * SAMRAI::hier::PatchLevel.
     */
    static void
    copyToPatchLevelVec(
        Vec& vec,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::SideVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Copy data from a parallel PETSc Vec on the provided
     * SAMRAI::hier::PatchLevel.
     */
    static void
    copyFromPatchLevelVec(
        Vec& vec,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::SideVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Assign a 0-based DOF index to each degree of freedom on a
     * SAMRAI::hier::PatchLevel, including ghost cell values.
     *
     * The DOF indices generated by this method are compatible with the parallel
     * PETSc Vec objects generated by constructPatchLevelVec().
     *
     * \note DOF indices are assigned to ghost cell values by this method.
     */
    static void
    constructPatchLevelDOFIndices(
        int dof_index_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::CellVariable<NDIM,int> > dof_index_var,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::CellVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Assign a 0-based DOF index to each degree of freedom on a
     * SAMRAI::hier::PatchLevel, including ghost cell values.
     *
     * The DOF indices generated by this method are compatible with the parallel
     * PETSc Vec objects generated by constructPatchLevelVec().
     *
     * \note DOF indices are assigned to ghost cell values by this method.
     */
    static void
    constructPatchLevelDOFIndices(
        int dof_index_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::SideVariable<NDIM,int> > dof_index_var,
        int data_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::SideVariable<NDIM,double> > data_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level);

    /*!
     * \brief Constrain ghost DOFs for a parallel PETSc Vec object.
     */
    static void
    constrainPatchLevelVec(
        Vec& vec,
        int dof_index_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::CellVariable<NDIM,int> > dof_index_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level,
        SAMRAI::tbox::Pointer<SAMRAI::xfer::RefineSchedule<NDIM> > dof_index_fill);

    /*!
     * \brief Constrain ghost DOFs for a parallel PETSc Vec object.
     */
    static void
    constrainPatchLevelVec(
        Vec& vec,
        int dof_index_idx,
        SAMRAI::tbox::Pointer<SAMRAI::pdat::SideVariable<NDIM,int> > dof_index_var,
        SAMRAI::tbox::Pointer<SAMRAI::hier::PatchLevel<NDIM> > patch_level,
        SAMRAI::tbox::Pointer<SAMRAI::xfer::RefineSchedule<NDIM> > dof_index_fill);

    //\}

protected:

private:
    /*!
     * \brief Default constructor.
     *
     * \note This constructor is not implemented and should not be used.
     */
    PETScVecUtilities();

    /*!
     * \brief Copy constructor.
     *
     * \note This constructor is not implemented and should not be used.
     *
     * \param from The value to copy to this object.
     */
    PETScVecUtilities(
        const PETScVecUtilities& from);

    /*!
     * \brief Assignment operator.
     *
     * \note This operator is not implemented and should not be used.
     *
     * \param that The value to assign to this object.
     *
     * \return A reference to this object.
     */
    PETScVecUtilities&
    operator=(
        const PETScVecUtilities& that);
};
}// namespace IBTK

/////////////////////////////// INLINE ///////////////////////////////////////

//#include "PETScVecUtilities.I"

//////////////////////////////////////////////////////////////////////////////

#endif //#ifndef included_PETScVecUtilities
