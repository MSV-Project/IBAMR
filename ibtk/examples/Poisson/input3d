Main {
// log file parameters
   log_file_name = "PoissonTester3d.log"
   log_all_nodes = FALSE

// visualization dump parameters
   viz_writer = "VisIt"
   viz_dump_enabled = TRUE
   viz_dump_dirname = "viz3d"
   visit_number_procs_per_file = 1

// timer dump parameters
   timer_enabled = TRUE
}

LocationIndexRobinBcCoefs {
   boundary_0 = "value", "0.0"
   boundary_1 = "value", "1.0"
   boundary_2 = "slope", "0.0"
   boundary_3 = "slope", "0.0"
   boundary_4 = "slope", "0.0"
   boundary_5 = "slope", "0.0"
}

FACPreconditioner {
   num_pre_sweeps  = 2
   num_post_sweeps = 2
}

FACOp {
   smoother_choice = "additive"
   prolongation_method = "LINEAR_REFINE"
   restriction_method  = "CONSERVATIVE_COARSEN"
   coarse_solver_choice = "hypre"
   coarse_solver_tolerance = 1.0e-12
   coarse_solver_max_iterations = 1
   hypre_solver {
      solver_type  = "PFMG"
      precond_type = "none"
      rap_type   = 0
      relax_type = 2
      skip_relax = 0
      num_pre_relax_steps   = 2
      num_post_relax_steps  = 2
      max_iterations        = 1
      relative_residual_tol = 1.0e-12
   }
}

N = 8

CartesianGeometry {
   domain_boxes       = [(0,0,0), (N - 1,N - 1,N - 1)]
   x_lo               = 0, 0, 0  // lower end of computational domain.
   x_up               = 1, 1, 1  // upper end of computational domain.
   periodic_dimension = 0, 0, 0
}

GriddingAlgorithm {
   max_levels = 3              // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = 4, 4, 4        // vector ratio to next coarser level
      level_2 = 4, 4, 4
   }

   largest_patch_size {
      level_0 = 512, 512, 512  // largest patch allowed in hierarchy
                               // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   1,   1,   1  // smallest patch allowed in hierarchy
                               // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.70e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [(0,0,0),(  N/2 - 1,  N/2 - 1,  N/2 - 1)]
      level_1 = [(0,0,0),(2*N/2 - 2,2*N/2 - 2,2*N/2 - 2)]
      level_2 = [(0,0,0),(4*N/2 - 3,4*N/2 - 2,4*N/2 - 3)]
   }
}

LoadBalancer {
   bin_pack_method = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 1.0

   timer_list = "IBTK::main::*"
}
