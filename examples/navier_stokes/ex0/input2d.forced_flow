// physical parameters
MU = 1.0e-2                               // fluid viscosity
RHO = 1.0                                 // fluid density

// grid spacing parameters
MAX_LEVELS = 2                            // maximum number of levels in locally refined grid
REF_RATIO  = 4                            // refinement ratio between levels
N = 16                                    // actual    number of grid cells on coarsest grid level
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // effective number of grid cells on finest   grid level

// solver parameters
SOLVER_TYPE        = "STAGGERED"          // the fluid solver to use (STAGGERED or COLLOCATED)
START_TIME         = 0.0e0                // initial simulation time
END_TIME           = 0.5                  // final simulation time
GROW_DT            = 2.0e0                // growth factor for timesteps
NUM_CYCLES         = 1                    // number of cycles of fixed-point iteration
CONVECTIVE_OP_TYPE = "PPM"                    // convective differencing discretization type
CONVECTIVE_FORM    = "ADVECTIVE"          // how to compute the convective terms
NORMALIZE_PRESSURE = TRUE                 // whether to explicitly force the pressure to have mean zero
CFL_MAX            = 0.3                  // maximum CFL number
DT_MAX             = 0.25/NFINEST         // maximum timestep size
VORTICITY_TAGGING  = TRUE                 // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER         = 1                    // sized of tag buffer used by grid generation algorithm
REGRID_INTERVAL    = 10000000             // effectively disable regridding
OUTPUT_U           = TRUE
OUTPUT_P           = TRUE
OUTPUT_F           = FALSE
OUTPUT_OMEGA       = TRUE
OUTPUT_DIV_U       = TRUE
ENABLE_LOGGING     = TRUE

// collocated solver parameters
PROJECTION_METHOD_TYPE = "PRESSURE_UPDATE"
SECOND_ORDER_PRESSURE_UPDATE = TRUE

// exact solution function expressions
U = "X_1*(3*X_1-2)*cos(2*PI*(X_0-sin(2*PI*t*t)))"
V = "2*PI*X_1*X_1*(X_1-1)*sin(2*PI*(X_0-sin(2*PI*t*t)))"
P = "-2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*sin(2*PI*X_1)+4*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*X_1-2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI+2*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*sin(2*PI*X_1)-2*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*X_1+nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI"
F_U = "24*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*cos(2*PI*t*t)*t*X_1*X_1-16*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*cos(2*PI*t*t)*t*X_1-6*cos(2*PI*(X_0-sin(2*PI*t*t)))*X_1^4*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI+8*cos(2*PI*(X_0-sin(2*PI*t*t)))*X_1^3*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI-4*cos(2*PI*(X_0-sin(2*PI*t*t)))*X_1*X_1*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI-4*cos(2*PI*t*t)*t*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*sin(2*PI*X_1)+8*cos(2*PI*t*t)*t*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1-4*cos(2*PI*t*t)*t*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI-4*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*sin(2*PI*X_1)+4*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1-2*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI+12*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1*X_1-8*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*PI*PI*X_1-6*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))"
F_V = "-2*PI*(8*PI*PI*cos(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*t*t)*t*X_1^3-8*PI*PI*cos(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*t*t)*t*X_1*X_1-6*PI*X_1^5+10*PI*X_1^4-4*PI*X_1^3+2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*X_1)-2*cos(2*PI*t*t)*t*sin(2*PI*(X_0-sin(2*PI*t*t)))-2*nu*cos(2*PI*(X_0-sin(2*PI*t*t)))*cos(2*PI*X_1)+nu*cos(2*PI*(X_0-sin(2*PI*t*t)))-4*nu*PI*PI*sin(2*PI*(X_0-sin(2*PI*t*t)))*X_1^3+4*nu*PI*PI*sin(2*PI*(X_0-sin(2*PI*t*t)))*X_1*X_1+6*nu*sin(2*PI*(X_0-sin(2*PI*t*t)))*X_1-2*nu*sin(2*PI*(X_0-sin(2*PI*t*t))))"

// normal tractions
T_n_X_0 = "2*cos(2*PI*t^2)*t*sin(2*PI*(X_0-sin(2*PI*t^2)))*sin(2*PI*X_1)-4*cos(2*PI*t^2)*t*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI*X_1+2*cos(2*PI*t^2)*t*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI-2*nu*cos(2*PI*(X_0-sin(2*PI*t^2)))*sin(2*PI*X_1)+2*nu*cos(2*PI*(X_0-sin(2*PI*t^2)))*PI*X_1-nu*cos(2*PI*(X_0-sin(2*PI*t^2)))*PI-12*nu*X_1^2*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI+8*nu*X_1*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI"
T_n_X_1 = "2*cos(2*PI*t^2)*t*sin(2*PI*(X_0-sin(2*PI*t^2)))*sin(2*PI*X_1)-4*cos(2*PI*t^2)*t*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI*X_1+2*cos(2*PI*t^2)*t*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI-2*nu*cos(2*PI*(X_0-sin(2*PI*t^2)))*sin(2*PI*X_1)+2*nu*cos(2*PI*(X_0-sin(2*PI*t^2)))*PI*X_1-nu*cos(2*PI*(X_0-sin(2*PI*t^2)))*PI+12*nu*X_1^2*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI-8*nu*X_1*sin(2*PI*(X_0-sin(2*PI*t^2)))*PI"

// tangential tractions
T_t = "2*nu*(3*X_1-1+2*PI^2*X_1^3-2*PI^2*X_1^2)*cos(2*PI*(X_0-sin(2*PI*t^2)))"

VelocityInitialConditions {
   nu = MU/RHO
   function_0 = U
   function_1 = V
}

VelocityBcCoefs_0 {
   nu = MU/RHO

   acoef_function_0 = "1.0" // U_acoef_0
   acoef_function_1 = "1.0" // U_acoef_1
   acoef_function_2 = "1.0" // U_acoef_2
   acoef_function_3 = "1.0" // U_acoef_3

   bcoef_function_0 = "0.0" // U_bcoef_0
   bcoef_function_1 = "0.0" // U_bcoef_1
   bcoef_function_2 = "0.0" // U_bcoef_2
   bcoef_function_3 = "0.0" // U_bcoef_3

   gcoef_function_0 = U // U_gcoef_0
   gcoef_function_1 = U // U_gcoef_1
   gcoef_function_2 = U // U_gcoef_2
   gcoef_function_3 = U // U_gcoef_3
}

VelocityBcCoefs_1 {
   nu = MU/RHO

   acoef_function_0 = "1.0" // V_acoef_0
   acoef_function_1 = "1.0" // V_acoef_1
   acoef_function_2 = "1.0" // V_acoef_2
   acoef_function_3 = "1.0" // V_acoef_3

   bcoef_function_0 = "0.0" // V_bcoef_0
   bcoef_function_1 = "0.0" // V_bcoef_1
   bcoef_function_2 = "0.0" // V_bcoef_2
   bcoef_function_3 = "0.0" // V_bcoef_3

   gcoef_function_0 = V // V_gcoef_0
   gcoef_function_1 = V // V_gcoef_1
   gcoef_function_2 = V // V_gcoef_2
   gcoef_function_3 = V // V_gcoef_3
}

PressureInitialConditions {
   nu = MU/RHO
   function = P
}

ForcingFunction {
   nu = MU/RHO
   function_0 = F_U
   function_1 = F_V
}

INSCollocatedHierarchyIntegrator {
   mu                         = MU
   rho                        = RHO
   start_time                 = START_TIME
   end_time                   = END_TIME
   grow_dt                    = GROW_DT
   num_cycles                 = NUM_CYCLES
   convective_op_type         = CONVECTIVE_OP_TYPE
   convective_difference_form = CONVECTIVE_FORM
   normalize_pressure         = NORMALIZE_PRESSURE
   cfl                        = CFL_MAX
   dt_max                     = DT_MAX
   using_vorticity_tagging    = VORTICITY_TAGGING
   vorticity_rel_thresh       = 0.25 , 0.125
   tag_buffer                 = TAG_BUFFER
   regrid_interval            = REGRID_INTERVAL
   output_U                   = OUTPUT_U
   output_P                   = OUTPUT_P
   output_F                   = OUTPUT_F
   output_Omega               = OUTPUT_OMEGA
   output_Div_U               = OUTPUT_DIV_U
   enable_logging             = ENABLE_LOGGING

   projection_method_type        = PROJECTION_METHOD_TYPE
   use_2nd_order_pressure_update = SECOND_ORDER_PRESSURE_UPDATE

   VelocityHypreSolver {
      solver_type           = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 2
      num_post_relax_steps  = 2
      relative_residual_tol = 1.0e-12
      max_iterations        = 1
      enable_logging        = FALSE
   }

   VelocityFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 1
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }

   PressureHypreSolver {
      solver_type           = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 2
      num_post_relax_steps  = 2
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PressureFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 3
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }
}

INSStaggeredHierarchyIntegrator {
   mu                         = MU
   rho                        = RHO
   start_time                 = START_TIME
   end_time                   = END_TIME
   grow_dt                    = GROW_DT
   num_cycles                 = NUM_CYCLES
   convective_op_type         = CONVECTIVE_OP_TYPE
   convective_difference_form = CONVECTIVE_FORM
   normalize_pressure         = NORMALIZE_PRESSURE
   cfl                        = CFL_MAX
   dt_max                     = DT_MAX
   using_vorticity_tagging    = VORTICITY_TAGGING
   vorticity_rel_thresh       = 0.25 , 0.125
   tag_buffer                 = TAG_BUFFER
   regrid_interval            = REGRID_INTERVAL
   output_U                   = OUTPUT_U
   output_P                   = OUTPUT_P
   output_F                   = OUTPUT_F
   output_Omega               = OUTPUT_OMEGA
   output_Div_U               = OUTPUT_DIV_U
   enable_logging             = ENABLE_LOGGING

   VelocityHypreSolver {
      solver_type           = "Split"
      split_solver_type     = "PFMG"
      relative_residual_tol = 1.0e-12
      max_iterations        = 1
      enable_logging        = FALSE
   }

   VelocityFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 1
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "CONSTANT_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "Split"
         split_solver_type     = "PFMG"
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }

   PressureHypreSolver {
      solver_type           = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 2
      num_post_relax_steps  = 2
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PressureFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 3
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }
}

Main {
   solver_type = SOLVER_TYPE

// log file parameters
   log_file_name               = "INS2d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = NFINEST/8   // zero to turn off
   viz_dump_dirname            = "viz_INS2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0           // zero to turn off
   restart_dump_dirname        = "restart_INS2d"

// timer dump parameters
   timer_dump_interval         = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0          // lower end of computational domain.
   x_up         =  1, 1          // upper end of computational domain.
   periodic_dimension = 1, 0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =  N,  N // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  4,  4 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR" // "REFINE_BOXES"
   RefineBoxes {
      level_0 = [(0*(REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [((REF_RATIO^0)*0   + 0,(REF_RATIO^0)*N/4 + 0),(  (REF_RATIO^0)*N   - 1,3*(REF_RATIO^0)*N/4 - 1)]
//    level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*0   + 0),(3*(REF_RATIO^0)*N/4 - 1,  (REF_RATIO^0)*N   - 1)]
//    level_0 = [(0*(REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(2*(REF_RATIO^0)*N/4 - 1,2*(REF_RATIO^0)*N/4 - 1)] , [((REF_RATIO^0)*N/4  + (REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/8 + 0),(2*(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/4 - 1,2*(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/8 - 1)] , [((REF_RATIO^0)*N/4  + 0,(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/4 + 0),(2*(REF_RATIO^0)*N/4 - 1,2*(REF_RATIO^0)*N/4 + (REF_RATIO^0)*N/4 - 1)]
      level_1 = [((REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1),(3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2)]
      level_2 = [((REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2),(3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
