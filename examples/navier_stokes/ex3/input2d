// physical parameters
Re = 1000.0
MU = 1/Re
RHO = 1.0

// grid spacing parameters
MAX_LEVELS = 3   // maximum number of levels in locally refined grid
REF_RATIO  = 4   // refinement ratio between levels

N = 4                                     // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

CFL_MAX = 1.0
U_MAX = 1.0
DX_FINEST = 1.0/NFINEST
DT = CFL_MAX*DX_FINEST/U_MAX

VelocityBcCoefs_0 {
   acoef_function_0 = "1.0" // U_acoef_0
   acoef_function_1 = "1.0" // U_acoef_1
   acoef_function_2 = "1.0" // U_acoef_2
   acoef_function_3 = "1.0" // U_acoef_3

   bcoef_function_0 = "0.0" // U_bcoef_0
   bcoef_function_1 = "0.0" // U_bcoef_1
   bcoef_function_2 = "0.0" // U_bcoef_2
   bcoef_function_3 = "0.0" // U_bcoef_3

   gcoef_function_0 = "0.0" // U_gcoef_0
   gcoef_function_1 = "0.0" // U_gcoef_1
   gcoef_function_2 = "0.0" // U_gcoef_2
   gcoef_function_3 = "0.5*(1+sin(2*PI*X_0-0.5*PI))" // U_gcoef_3
}

VelocityBcCoefs_1 {
   acoef_function_0 = "1.0" // U_acoef_0
   acoef_function_1 = "1.0" // U_acoef_1
   acoef_function_2 = "1.0" // U_acoef_2
   acoef_function_3 = "1.0" // U_acoef_3

   bcoef_function_0 = "0.0" // U_bcoef_0
   bcoef_function_1 = "0.0" // U_bcoef_1
   bcoef_function_2 = "0.0" // U_bcoef_2
   bcoef_function_3 = "0.0" // U_bcoef_3

   gcoef_function_0 = "0.0" // U_gcoef_0
   gcoef_function_1 = "0.0" // U_gcoef_1
   gcoef_function_2 = "0.0" // U_gcoef_2
   gcoef_function_3 = "0.0" // U_gcoef_3
}

INSStaggeredHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 500.0    // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   regrid_interval       = 1

   enable_logging = TRUE

   num_cycles = 3
   cfl = CFL_MAX
   dt_max = DT

   tag_buffer = 1

   convective_difference_form = "ADVECTIVE"
   using_vorticity_tagging = TRUE
   vorticity_rel_thresh = 0.125 , 0.0625

   output_U = TRUE
   output_P = TRUE
   output_F = FALSE
   output_Omega = TRUE
   output_Div_U = TRUE

   mu  = MU
   rho = RHO

   normalize_pressure = TRUE

   HelmholtzHypreSolver {
      solver_type           = "Split"
      split_solver_type     = "PFMG"
      relative_residual_tol = 1.0e-12
      max_iterations        = 1
      enable_logging        = FALSE
   }

   HelmholtzFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 1
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "CONSTANT_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "Split"
         split_solver_type     = "PFMG"
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }

   PoissonHypreSolver {
      solver_type           = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 2
      num_post_relax_steps  = 2
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PoissonFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 3
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }
}

Main {
// log file parameters
   log_file_name    = "INS2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = 16          // zero to turn off
   viz_dump_dirname      = "viz_INS2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0           // zero to turn off
   restart_write_dirname = "restart_INS2d"

// hierarchy data dump parameters
   hier_dump_interval = 0              // zero to turn off
   hier_dump_dirname  = "hier_data_INS2d"

// timer dump parameters
   timer_dump_interval   = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0          // lower end of computational domain.
   x_up         =  1, 1          // upper end of computational domain.
   periodic_dimension = 0, 0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  4,  4 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...

   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR" , "REFINE_BOXES"
   RefineBoxes {
        level_0 = [( (REF_RATIO^0)*N/2 - 1, (REF_RATIO^0)*N - 1),((REF_RATIO^0)*N/2 , (REF_RATIO^0)*N - 1)]
        level_1 = [( (REF_RATIO^1)*N/2 - 1, (REF_RATIO^1)*N - 1),((REF_RATIO^1)*N/2 , (REF_RATIO^1)*N - 1)]
        level_2 = [( (REF_RATIO^2)*N/2 - 1, (REF_RATIO^2)*N - 1),((REF_RATIO^2)*N/2 , (REF_RATIO^2)*N - 1)]
        level_3 = [( (REF_RATIO^3)*N/2 - 1, (REF_RATIO^3)*N - 1),((REF_RATIO^3)*N/2 , (REF_RATIO^3)*N - 1)]
        level_4 = [( (REF_RATIO^4)*N/2 - 1, (REF_RATIO^4)*N - 1),((REF_RATIO^4)*N/2 , (REF_RATIO^4)*N - 1)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
