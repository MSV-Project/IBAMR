// physical parameters
MU = 0.01
RHO = 1.0

// grid spacing parameters
MAX_LEVELS = 1   // maximum number of levels in locally refined grid
REF_RATIO  = 4   // refinement ratio between levels

N = 32                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

// exact solution function expressions
U = "1.0 + exp(-4.0*PI*PI*nu*t)*(C*cos(2*PI*(X_1-t)) + A*sin(2*PI*(X_2-t)))"
V = "1.0 + exp(-4.0*PI*PI*nu*t)*(B*sin(2*PI*(X_0-t)) + A*cos(2*PI*(X_2-t)))"
W = "1.0 + exp(-4.0*PI*PI*nu*t)*(B*cos(2*PI*(X_0-t)) + C*sin(2*PI*(X_1-t)))"
P = "-exp(-8.0*PI*PI*nu*t)*(A*C*cos(2*PI*(X_1-t))*sin(2*PI*(X_2-t)) + A*B*sin(2*PI*(X_0-t))*cos(2*PI*(X_2-t)) + B*C*cos(2*PI*(X_0-t))*sin(2*PI*(X_1-t)))"

VelocitySolution {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0
   function_0 = U
   function_1 = V
   function_2 = W
}

PressureSolution {
   nu = MU/RHO
   A = 1.0
   B = 1.0
   C = 1.0
   function = P
}

INSHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 1.0e0    // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10000    // max number of simulation timesteps
   regrid_interval       = 10000    // disable regridding

   enable_logging = TRUE

   cfl = 1.0
   dt_max = 1.0/(4.0*NFINEST)

   tag_buffer = 1

   convective_difference_form = "ADVECTIVE"

   using_vorticity_tagging = TRUE
   vorticity_rel_thresh = 0.25

   output_P = TRUE
   output_F = FALSE
   output_Q = FALSE

   output_Omega = FALSE

   output_Div_U = FALSE
   output_Div_u = FALSE
   output_Div_u_adv = FALSE

   mu  = MU
   rho = RHO

   velocity_projection_type = "pressure_increment"
   pressure_projection_type = "pressure_update"

   using_synch_projection = FALSE
   second_order_pressure_update = TRUE
   normalize_pressure = TRUE

   num_cycles = 1
   num_init_cycles = 5

   helmholtz_max_iterations = 25
   helmholtz_abs_residual_tol = 1.0e-30
   helmholtz_rel_residual_tol = 1.0e-12
}

GodunovAdvector {
}

AdvDiffHierarchyIntegrator {
   viscous_timestepping_type = "CRANK_NICOLSON"

   enable_logging = TRUE

   tag_buffer = 1

   AdvDiffHypPatchOps {
      compute_init_velocity  = TRUE
      compute_half_velocity  = FALSE
      compute_final_velocity = FALSE
   }

   HyperbolicLevelIntegrator {
      cfl                      = 0.975e0  // max cfl factor used in problem
      cfl_init                 = 0.975e0  // initial cfl factor
      lag_dt_computation       = FALSE
      use_ghosts_to_compute_dt = FALSE
   }

   max_iterations = 25
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-12
   using_FAC = TRUE

   FACOps {
      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 1

      coarse_solver_choice = "block_jacobi"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization   = "LINEAR_REFINE"
   }

   FACPreconditioners {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 3
   }
}

HierarchyProjector {
   enable_logging = TRUE

   max_iterations = 25
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-12

   FACOp {
      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 1

      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization   = "LINEAR_REFINE"

      hypre_solver {
         solver_type = "PFMG"
         rap_type = 1
         relax_type = 3
         num_pre_relax_steps   = 2
         num_post_relax_steps  = 2
         max_iterations        = 1
         relative_residual_tol = 1.0e-12
         enable_logging = FALSE
      }
   }

   FACPreconditioner {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 3
   }
}

Main {
// log file parameters
   log_file_name    = "INS3d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = NFINEST/8   // zero to turn off
   viz_dump_dirname      = "viz_INS3d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0           // zero to turn off
   restart_write_dirname = "restart_INS3d"

// timer dump parameters
   timer_dump_interval   = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0,0) , (N - 1,N - 1,N - 1) ]
   x_lo         =  0, 0, 0    // lower end of computational domain.
   x_up         =  1, 1, 1    // upper end of computational domain.
   periodic_dimension = 1, 1, 1
}

GriddingAlgorithm {
   allow_patches_smaller_than_ghostwidth = TRUE

   max_levels = MAX_LEVELS                     // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512,512 // largest patch allowed in hierarchy
                           // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  4,  4,  4 // smallest patch allowed in hierarchy
                           // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
      level_1 = [((REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1),(3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2)]
      level_2 = [((REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2),(3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
