// physical parameters
L      = 9.0                              // width of computational domain
MU     = 1.2e-3                           // corresponds to Re=210
RHO    = 3.0e-4
V0     = 280.0
G      = 980.0
LAMBDA = RHO*G/V0

// grid spacing parameters
MAX_LEVELS = 5                            // maximum number of levels in locally refined grid
REF_RATIO  = 2                            // refinement ratio between levels
N = 16                                    // actual    number of grid cells on coarsest grid level
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // effective number of grid cells on finest   grid level

// solver parameters
DELTA_FUNCTION      = "IB_4"
SOLVER_TYPE         = "STAGGERED"         // the fluid solver to use (STAGGERED or COLLOCATED)
START_TIME          = 0.0e0               // initial simulation time
END_TIME            = 1.2                 // final simulation time
GROW_DT             = 2.0e0               // growth factor for timesteps
NUM_CYCLES          = 1                   // number of cycles of fixed-point iteration
CONVECTIVE_TS_TYPE  = "ADAMS_BASHFORTH"   // convective time stepping type
CONVECTIVE_OP_TYPE  = "PPM"               // convective differencing discretization type
CONVECTIVE_FORM     = "ADVECTIVE"         // how to compute the convective terms
NORMALIZE_PRESSURE  = FALSE               // whether to explicitly force the pressure to have mean zero
CFL_MAX             = 0.025               // maximum CFL number
DT                  = 1.28e-1/(NFINEST^2) // maximum timestep size
ERROR_ON_DT_CHANGE  = TRUE                // whether to emit an error message if the time step size changes
VORTICITY_TAGGING   = TRUE                // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER          = 2                   // size of tag buffer used by grid generation algorithm
REGRID_CFL_INTERVAL = 0.5                 // regrid whenever any material point could have moved 0.5 meshwidths since previous regrid
OUTPUT_U            = TRUE
OUTPUT_P            = TRUE
OUTPUT_F            = FALSE
OUTPUT_OMEGA        = TRUE
OUTPUT_DIV_U        = TRUE
ENABLE_LOGGING      = TRUE

// collocated solver parameters
PROJECTION_METHOD_TYPE = "PRESSURE_UPDATE"
SECOND_ORDER_PRESSURE_UPDATE = TRUE
USE_EXACT_PROJECTION_METHOD = FALSE

VelocityBcCoefs_0 {
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

VelocityBcCoefs_1 {
   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

ForcingFunction {
   g = G
   rho = RHO
   F = 200
   function_0 = "0.0"
   function_1 = "-g*rho*( 1 + (F-1)*exp(-400*t) - F*exp(-600*t) )"
}

IBHierarchyIntegrator {
   start_time          = START_TIME
   end_time            = END_TIME
   grow_dt             = GROW_DT
   num_cycles          = NUM_CYCLES
   regrid_cfl_interval = REGRID_CFL_INTERVAL
   dt_max              = DT
   error_on_dt_change  = ERROR_ON_DT_CHANGE
   tag_buffer          = TAG_BUFFER
   enable_logging      = ENABLE_LOGGING
}

PenaltyIBMethod {
   delta_fcn      = DELTA_FUNCTION
   enable_logging = ENABLE_LOGGING
   gravitational_acceleration = 0.0 , -G
}

spring_stiffness = 36000.0  // dyne
bend_rigidity = 0.1         // erg cm
bdry_mass_density = 4.0e-4  // g cm^-1
bdry_mass_stiffness = 1.0e4 // dyne/cm

IBStandardInitializer {
   max_levels      = MAX_LEVELS
   structure_names = "fila_256"
   fila_256
   {
      level_number = MAX_LEVELS - 1
      ds = 3.84 / NFINEST
      uniform_spring_stiffness = spring_stiffness
      uniform_spring_rest_length = ds
      uniform_beam_bend_rigidity = bend_rigidity*ds/(ds^4)
      uniform_bdry_mass = bdry_mass_density*ds
      uniform_bdry_mass_stiffness = bdry_mass_stiffness
   }
}

INSCollocatedHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   lambda                        = LAMBDA
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25 , 0.125 , 0.0625
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
   projection_method_type        = PROJECTION_METHOD_TYPE
   use_2nd_order_pressure_update = SECOND_ORDER_PRESSURE_UPDATE
   use_exact_projection_method   = USE_EXACT_PROJECTION_METHOD
}

INSStaggeredHierarchyIntegrator {
   mu                            = MU
   rho                           = RHO
   lambda                        = LAMBDA
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   convective_op_type            = CONVECTIVE_OP_TYPE
   convective_difference_form    = CONVECTIVE_FORM
   normalize_pressure            = NORMALIZE_PRESSURE
   cfl                           = CFL_MAX
   dt_max                        = DT
   using_vorticity_tagging       = VORTICITY_TAGGING
   vorticity_rel_thresh          = 0.25 , 0.125 , 0.0625
   tag_buffer                    = TAG_BUFFER
   output_U                      = OUTPUT_U
   output_P                      = OUTPUT_P
   output_F                      = OUTPUT_F
   output_Omega                  = OUTPUT_OMEGA
   output_Div_U                  = OUTPUT_DIV_U
   enable_logging                = ENABLE_LOGGING
}

Main {
   solver_type = SOLVER_TYPE

// log file parameters
   log_file_name               = "IB2d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = 32*int(floor(1/CFL_MAX))  // zero to turn off
   viz_dump_dirname            = "viz_IB2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0                         // zero to turn off
   restart_dump_dirname        = "restart_IB2d"

// hierarchy data dump parameters
   data_dump_interval          = 0                         // zero to turn off
   data_dump_dirname           = "hier_data_IB2d"

// timer dump parameters
   timer_dump_interval         = 0                         // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,2*N - 1) ]
   x_lo         =  0, 0         // lower end of computational domain.
   x_up         =  L, 2*L       // upper end of computational domain.
   periodic_dimension = 0, 0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
      level_4 = REF_RATIO,REF_RATIO
      level_5 = REF_RATIO,REF_RATIO
      level_6 = REF_RATIO,REF_RATIO
      level_7 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8,  8 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   efficiency_tolerance   = 0.80e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.80e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR" , "REFINE_BOXES"
   RefineBoxes {
      level_0 = [( 0 ,             2*N - 1),(             N - 1 ,             2*N - 1)]
      level_1 = [( 0 , REF_RATIO  *2*N - 1),( REF_RATIO  *N - 1 , REF_RATIO  *2*N - 1)]
      level_2 = [( 0 , REF_RATIO^2*2*N - 1),( REF_RATIO^2*N - 1 , REF_RATIO^2*2*N - 1)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
