// physical parameters
R = 0.5             // the cylinder radius
Re = 200.0          // the desired Reynolds number (Re)
MU = 2.0*R/Re       // the viscosity required to attain the desired Re
RHO = 1.0

// grid spacing parameters
MAX_LEVELS = 3   // maximum number of levels in locally refined grid
REF_RATIO  = 4   // refinement ratio between levels

N = 16                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing
L = 16.0                                  // width of computational domain

dx = L/NFINEST

VelocityInitialConditions {
   function_0 = "0.0"
   function_1 = "0.0"
}

VelocityBcCoefs_0 {
   t_half = 0.5
   tau = 0.125

   acoef_function_0 = "1.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"

   gcoef_function_0 = "(tanh((t-t_half)/tau)+tanh(t_half/tau))/(1+tanh(t_half/tau))"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

VelocityBcCoefs_1 {
   acoef_function_0 = "1.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "cos(pi*X_1/16.0)*exp(-2.0*t)"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

IBHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 300.0e0  // final simulation time
   grow_dt               = 1.25e0   // growth factor for timesteps
   regrid_cfl_interval   = 0.75
   dt_max = 0.125*dx
   num_cycles = 2
   delta_fcn = "IB_4"
   enable_logging = TRUE
}

INSStaggeredHierarchyIntegrator {
   enable_logging = TRUE

   cfl = 0.2475

   tag_buffer = 1

   convective_difference_form = "ADVECTIVE"
   using_vorticity_tagging = TRUE
   vorticity_abs_thresh = 0.5 , 1 , 2

   output_U = TRUE
   output_P = TRUE
   output_F = FALSE
   output_Omega = TRUE
   output_Div_U = FALSE

   mu  = MU
   rho = RHO

   normalize_pressure = FALSE

   HelmholtzHypreSolver {
      solver_type           = "Split"
      split_solver_type     = "PFMG"
      relative_residual_tol = 1.0e-12
      max_iterations        = 1
      enable_logging        = FALSE
   }

   HelmholtzFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 1
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "CONSTANT_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "Split"
         split_solver_type     = "PFMG"
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }

   PoissonHypreSolver {
      solver_type           = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 2
      num_post_relax_steps  = 2
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PoissonFACSolver {
      num_pre_sweeps  = 0
      num_post_sweeps = 3
      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }
}

C_IB_4 = 3.0/8.0                         // corresponds to IB_4 delta function
C_IB_6 = 67.0/128.0                      // corresponds to IB_6 delta function
C = C_IB_4

M_s = RHO/((C/dx)^2)                     // effective particle mass
tau_s = 0.5*dx                           // decay half-life  for critically damped Kelvin-Voigt element
K_s = M_s*(log(0.5)/tau_s)^2             // spring  constant for critically damped Kelvin-Voigt element
E_s = 2.0*sqrt(K_s*M_s)                  // damping constant for critically damped Kelvin-Voigt element

IBStandardInitializer {
   max_levels = MAX_LEVELS
   base_filenames_2 = "cylinder2d_256"
   cylinder2d_256 {
      uniform_target_stiffness = K_s
      uniform_target_damping   = E_s
   }
}

Main {
// log file parameters
   log_file_name    = "IB2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = NFINEST/2   // zero to turn off
   viz_dump_dirname      = "viz_IB2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0           // zero to turn off
   restart_write_dirname = "restart_IB2d"

// hierarchy data dump parameters
   hier_dump_interval = 0              // zero to turn off
   hier_dump_dirname  = "hier_data_IB2d"

// timer dump parameters
   timer_dump_interval   = 0           // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (2*N - 1,N - 1) ]
   x_lo         =  - 0.5*L, - 0.5*L      // lower end of computational domain.
   x_up         =    1.5*L,   0.5*L      // upper end of computational domain.
   periodic_dimension = 0, 0
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
      level_4 = REF_RATIO,REF_RATIO
      level_5 = REF_RATIO,REF_RATIO
      level_6 = REF_RATIO,REF_RATIO
      level_7 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8,  8 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.95e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.95e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
