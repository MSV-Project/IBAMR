// physical parameters
MU  = 1.2e-3     // corresponds to Re=210
RHO = 3.0e-4
V0  = 280.0
G   = 980.0
CFL = 0.05

// grid spacing parameters
MAX_LEVELS = 4   // maximum number of levels in locally refined grid
REF_RATIO  = 4   // refinement ratio between levels

N = 8                                     // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

VelocityInitialConditions {
   function_0 = "0.0"
   function_1 = "0.0"
}

ForcingFunction {
   g = G
   rho = RHO
   F = 200
   function_0 = "0.0"
   function_1 = "-g*rho*( 1 + (F-1)*exp(-400*t) - F*exp(-600*t) )"
}

IBStaggeredHierarchyIntegrator {
   start_time            = 0.0e0    // initial simulation time
   end_time              = 1.2e0    // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10000000 // max number of simulation timesteps
   regrid_interval       = int(floor(1/CFL))
   dt_max = 0.128/(NFINEST^2)
   num_cycles = 2
   delta_fcn = "IB_4"
   enable_logging = TRUE

   using_pIB_method = TRUE
   gravitational_acceleration = 0.0 , -G
}

LEInteractor {
   debug_sort_mode = "NO_SORT"
   precision_mode  = "DOUBLE"
}

PETScVecOps {
   sort_mode      = "SORT_DECREASING_MAGNITUDE"
   precision_mode = "DOUBLE_DOUBLE"
   summation_mode = "COMPENSATED_SUMMATION"
}

spring_stiffness = 36000.0  // dyne
bend_rigidity = 0.1         // erg cm
bdry_mass_density = 4.0e-4  // g cm^-1
bdry_mass_stiffness = 1.0e4 // dyne/cm

IBStandardInitializer {
   max_levels = MAX_LEVELS
   base_filenames_3 = "fila_512"
   fila_512
   {
      ds = 3.84 / NFINEST

      uniform_spring_stiffness = spring_stiffness
      uniform_spring_rest_length = ds

      uniform_beam_bend_rigidity = bend_rigidity*ds/(ds^4)

      uniform_bdry_mass = bdry_mass_density*ds
      uniform_bdry_mass_stiffness = bdry_mass_stiffness
   }
}

INSStaggeredHierarchyIntegrator {
   enable_logging = TRUE

   cfl = CFL

   tag_buffer = 2

   using_vorticity_tagging = TRUE
   vorticity_rel_thresh = 0.0625

   output_U = TRUE
   output_P = TRUE
   output_F = TRUE
   output_Omega = TRUE
   output_Div_U = FALSE

   mu  = MU
   rho = RHO
   lambda = RHO*G/V0

   normalize_pressure = TRUE

   HelmholtzHypreSolver {
      solver_type           = "PCG"
      precond_type          = "Split"
      split_solver_type     = "Jacobi"
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   HelmholtzFACSolver {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 2

      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 1

      coarse_solver_choice = "block_jacobi"
      coarse_solver_tolerance = 1.0e-30
      coarse_solver_max_iterations = 2
      prolongation_method = "CONSERVATIVE_LINEAR_REFINE"
      cf_discretization   = "CONSERVATIVE_LINEAR_REFINE"
   }

   PoissonHypreSolver {
      solver_type           = "PCG"
      precond_type          = "PFMG"
      rap_type              = 0
      relax_type            = 2
      skip_relax            = 1
      num_pre_relax_steps   = 1
      num_post_relax_steps  = 1
      relative_residual_tol = 1.0e-2
      max_iterations        = 100
      enable_logging        = FALSE
   }

   PoissonFACSolver {
      max_cycles = 1
      residual_tol = 1.0e-12
      num_pre_sweeps  = 0  // this should always be 0
      num_post_sweeps = 3

      fac_max_cycles = 1
      fac_uses_presmoothing = FALSE
      fac_initial_guess_nonzero = FALSE

      skip_restrict_sol = TRUE
      skip_restrict_residual = FALSE

      ssor_iterations = 1

      coarse_solver_choice = "hypre"
      coarse_solver_tolerance = 1.0e-12
      coarse_solver_max_iterations = 1
      prolongation_method = "LINEAR_REFINE"
      cf_discretization   = "LINEAR_REFINE"

      hypre_solver {
         solver_type           = "PFMG"
         rap_type              = 0
         relax_type            = 2
         skip_relax            = 1
         num_pre_relax_steps   = 0
         num_post_relax_steps  = 3
         relative_residual_tol = 1.0e-12
         max_iterations        = 1
         enable_logging        = FALSE
      }
   }
}

Main {
// log file parameters
   log_file_name    = "IB2d.log"
   log_all_nodes    = FALSE

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = 16*int(floor(1/CFL)) // zero to turn off
   viz_dump_dirname      = "viz_IB2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0                    // zero to turn off
   restart_write_dirname = "restart_IB2d"

// timer dump parameters
   timer_dump_interval   = 0                    // zero to turn off
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (4*N - 1,4*N - 1) ]
   x_lo         =  0 - 13.5,  9 - 13.5       // lower end of computational domain.
   x_up         =  9 + 13.5, 18 + 13.5       // upper end of computational domain.
   periodic_dimension = 1, 1
}

GriddingAlgorithm {
   allow_patches_smaller_than_ghostwidth = TRUE

   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
      level_4 = REF_RATIO,REF_RATIO
      level_5 = REF_RATIO,REF_RATIO
      level_6 = REF_RATIO,REF_RATIO
      level_7 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 =512,512 // largest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8,  8 // smallest patch allowed in hierarchy
                       // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.85e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
