// grid spacing parameters
MAX_LEVELS = 2   // maximum number of levels in locally refined grid
REF_RATIO  = 2   // refinement ratio between levels

N = 64                                    // coarsest grid spacing
NFINEST = (REF_RATIO^(MAX_LEVELS - 1))*N  // finest   grid spacing

GodunovAdvector {
   // intentionally blank
}

AdvDiffHierarchyIntegrator {
   enable_logging = TRUE

   tag_buffer = 1

   start_time            = 0.0e0    // initial simulation time
   end_time              = 0.2      // final simulation time
   grow_dt               = 2.0e0    // growth factor for timesteps
   max_integrator_steps  = 10000    // max number of simulation timesteps
   regrid_interval       = 10000    // effectively disable regridding

   AdvDiffHypPatchOps {
      compute_init_velocity  = TRUE
      compute_half_velocity  = TRUE
      compute_final_velocity = FALSE
      extrap_type = "LINEAR"

      Refinement_data {
         refine_criteria = "QVAL_GRADIENT"
         QVAL_GRADIENT {
            grad_tol = 25,25,0.1
         }
      }
   }

   HyperbolicLevelIntegrator {
      cfl                      = 0.975e0  // max cfl factor used in problem
      cfl_init                 = 0.975e0  // initial cfl factor
      lag_dt_computation       = TRUE
      use_ghosts_to_compute_dt = FALSE
   }

   max_iterations = 50
   abs_residual_tol = 1.0e-30
   rel_residual_tol = 1.0e-10
   using_FAC = TRUE

   FACOps {
      coarse_solver_choice = "block_jacobi"
      coarse_solver_tolerance = 1.0e-6
      coarse_solver_max_iterations = 1
      restriction_method  = "CONSERVATIVE_COARSEN"
      prolongation_method = "CONSTANT_REFINE"
   }

   FACPreconditioners {
      num_pre_sweeps  = 0
      num_post_sweeps = 3
   }
}

QInit {
   init_type = "GAUSSIAN"
   kappa = 0.01
}

LocationIndexRobinBcCoefs {
   boundary_0 = "value", "0.0"  // x lower boundary
   boundary_1 = "value", "0.0"  // x upper boundary
   boundary_2 = "value", "0.0"  // y lower boundary
   boundary_3 = "value", "0.0"  // y upper boundary
}

UFunction {
   init_type = "UNIFORM"
   uniform_u = 10.0 , -5.0
}

Main {
// log file parameters
   log_file_name               = "adv_diff2d.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt"
   viz_dump_interval           = NFINEST/8   // zero to turn off
   viz_dump_dirname            = "viz_adv_diff2d"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_dump_interval       = 0           // zero to turn off
   restart_dump_dirname        = "restart_adv_diff2d"
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (N - 1,N - 1) ]
   x_lo         =  0, 0          // lower end of computational domain.
   x_up         =  1, 1          // upper end of computational domain.
   periodic_dimension = 1, 1
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 = 512, 512  // largest patch allowed in hierarchy
                          // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =   4,   4  // smallest patch allowed in hierarchy
                          // all finer levels will use same values as level_0...
   }

   efficiency_tolerance = 0.85e0  // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0  // chop box if sum of volumes of smaller
                                  // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0 = [((REF_RATIO^0)*N/4 + 0,(REF_RATIO^0)*N/4 + 0),(3*(REF_RATIO^0)*N/4 - 1,3*(REF_RATIO^0)*N/4 - 1)]
      level_1 = [((REF_RATIO^1)*N/4 + 1,(REF_RATIO^1)*N/4 + 1),(3*(REF_RATIO^1)*N/4 - 2,3*(REF_RATIO^1)*N/4 - 2)]
      level_2 = [((REF_RATIO^2)*N/4 + 2,(REF_RATIO^2)*N/4 + 2),(3*(REF_RATIO^2)*N/4 - 3,3*(REF_RATIO^2)*N/4 - 3)]
   }
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
